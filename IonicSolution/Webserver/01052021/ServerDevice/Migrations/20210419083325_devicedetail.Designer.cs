// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServerDevice.Data;

namespace ServerDevice.Migrations
{
    [DbContext(typeof(ServerDeviceContext))]
    [Migration("20210419083325_devicedetail")]
    partial class devicedetail
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ServerDevice.Models.Device", b =>
                {
                    b.Property<int>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PropertyId")
                        .HasColumnType("int");

                    b.Property<string>("PropertyValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeviceId");

                    b.ToTable("Device");
                });

            modelBuilder.Entity("ServerDevice.Models.DeviceDetail", b =>
                {
                    b.Property<string>("strDeviceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("boolIsOnline")
                        .HasColumnType("bit");

                    b.Property<bool>("boolQrCodeActive")
                        .HasColumnType("bit");

                    b.Property<bool>("boolUseSampling")
                        .HasColumnType("bit");

                    b.Property<byte>("bytFaceDetectionMode")
                        .HasColumnType("tinyint");

                    b.Property<byte>("bytFaceDetectionQuality")
                        .HasColumnType("tinyint");

                    b.Property<byte>("byteDetectionCount")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("dateClientDateTimeTicks")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("dateServerDateTimeTicks")
                        .HasColumnType("datetime2");

                    b.Property<string>("strDeviceIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("strPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("strShowDubugPanel")
                        .HasColumnType("bit");

                    b.Property<float>("strVolume")
                        .HasColumnType("real");

                    b.Property<int>("ushortFaceDetectionFrameRateMaximum")
                        .HasColumnType("int");

                    b.HasKey("strDeviceId");

                    b.ToTable("DeviceDetail");
                });

            modelBuilder.Entity("ServerDevice.Models.DeviceDynamicProperties", b =>
                {
                    b.Property<int>("PropertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlaceHolder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PropertyId");

                    b.ToTable("DeviceDynamicProperties");
                });
#pragma warning restore 612, 618
        }
    }
}
